using System.Collections;
using UnityEngine;
using SplineMesh;

namespace Jail.Environment
{
    [ExecuteInEditMode]
    [SelectionBase]
    [DisallowMultipleComponent]
    public class SplineChain : MonoBehaviour
    {
        public Spline Spline => spline;

        GameObject generated;
        Spline spline = null;
        bool toUpdate = true;

        [SerializeField]
        GameObject prefab;
        [SerializeField]
        float scale = 1.0f, spacing = 1.0f;

        void OnEnable()
        {
            string generatedName = "generated by " + GetType().Name;
            var generatedTranform = transform.Find(generatedName);
            generated = generatedTranform != null ? generatedTranform.gameObject : UOUtility.Create(generatedName, gameObject);

            spline = GetComponentInParent<Spline>();
            spline.NodeListChanged += (s, e) => {
                toUpdate = true;
                foreach (CubicBezierCurve curve in spline.GetCurves())
                {
                    curve.Changed.AddListener(() => toUpdate = true);
                }
            };
            foreach (CubicBezierCurve curve in spline.GetCurves())
            {
                curve.Changed.AddListener(() => toUpdate = true);
            }
        }

        void OnValidate()
        {
            toUpdate = true;
        }

        void Update()
        {
            if (toUpdate)
            {
                UpdateChains();
                toUpdate = false;
            }
        }

        public void UpdateChains()
        {
            UOUtility.DestroyChildren(generated);

            //  check for negative spacing
            if (spacing <= 0)
            {
                Debug.LogError("SplineChain: Spacing can't be lower or equal than 0");
                return;
            }
            //  check for null prefab
            if (prefab == null)
            {
                Debug.LogError("SplineChain: No prefab was set up");
                return;
            }

            int i = 0;
            float distance = 0;
            while (distance <= spline.Length)
            {
                CurveSample sample = spline.GetSampleAtDistance(distance);

                GameObject go;
                go = Instantiate(prefab, generated.transform);
                go.transform.localRotation = Quaternion.identity;
                go.transform.localPosition = Vector3.zero;
                go.transform.localScale = Vector3.one;

                //  move along spline, according to spacing
                go.transform.localPosition = sample.location;
                
                //  apply scale
                go.transform.localScale = new Vector3(scale, scale, scale);
                
                //  rotate
                go.transform.rotation = sample.Rotation;
                if (i % 2 == 0)
                {
                    go.transform.Rotate(Vector3.right, 90.0f);
                }

                // move orthogonaly to the spline
                var binormal = (Quaternion.LookRotation(sample.tangent, sample.up) * Vector3.right).normalized;
                go.transform.position += binormal;

                distance += spacing;
                i++;
            }
        }
    }
}